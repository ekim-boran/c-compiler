var i32 @nonce = 1

fun i32 @fibonacci (i32) {
init:
  bid: b0
  allocations: 
    %l0:i32:n

block b0:
  %b0:p0:i32:n
  %b0:i0:unit = nop
  %b0:i1:unit = nop
  %b0:i2:u1 = cmp lt %b0:p0:i32 2:i32
  br %b0:i2:u1, b1(), b2()

block b1:
  %b1:i0:unit = nop
  ret %b0:p0:i32

block b2:
  %b2:i0:unit = nop
  %b2:i1:i32 = sub %b0:p0:i32 2:i32
  %b2:i2:i32 = call @fibonacci:[ret:i32 params:(i32)]*(%b2:i1:i32)
  %b2:i3:unit = nop
  %b2:i4:i32 = sub %b0:p0:i32 1:i32
  %b2:i5:i32 = call @fibonacci:[ret:i32 params:(i32)]*(%b2:i4:i32)
  %b2:i6:i32 = add %b2:i2:i32 %b2:i5:i32
  ret %b2:i6:i32
}

fun i32 @main () {
init:
  bid: b0
  allocations: 
    %l0:i32:number

block b0:
  %b0:i0:i32 = load @nonce:i32*
  %b0:i1:i32 = mod %b0:i0:i32 20:i32
  %b0:i2:unit = nop
  %b0:i3:unit = nop
  %b0:i4:i32 = call @fibonacci:[ret:i32 params:(i32)]*(%b0:i1:i32)
  ret %b0:i4:i32
}
