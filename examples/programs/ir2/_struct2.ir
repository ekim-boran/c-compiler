struct %t0 : { a:i8, %anon:struct %t1, c:i64 }
struct %t1 : { b:[4 x i32] }
fun i32 @main () {
init:
  bid: b0
  allocations:
    %l0:const struct %t0:temp
    %l1:struct %t0:temp2
block b0:
  %b0:i0:i8* = getelementptr %l0:const struct %t0* offset 0:i64
  %b0:i1:unit = store 1:i8 %b0:i0:i8*
  %b0:i2:struct %t1* = getelementptr %l0:const struct %t0* offset 4:i64
  %b0:i3:[4 x i32]* = getelementptr %b0:i2:struct %t1* offset 0:i64
  %b0:i4:i32* = getelementptr %b0:i3:[4 x i32]* offset 0:i64
  %b0:i5:i32* = getelementptr %b0:i4:i32* offset 0:i64
  %b0:i6:unit = store 2:i32 %b0:i5:i32*
  %b0:i7:i32* = getelementptr %b0:i4:i32* offset 4:i64
  %b0:i8:unit = store 3:i32 %b0:i7:i32*
  %b0:i9:i32* = getelementptr %b0:i4:i32* offset 8:i64
  %b0:i10:unit = store 4:i32 %b0:i9:i32*
  %b0:i11:i32* = getelementptr %b0:i4:i32* offset 12:i64
  %b0:i12:unit = store 5:i32 %b0:i11:i32*
  %b0:i13:i64* = getelementptr %l0:const struct %t0* offset 24:i64
  %b0:i14:unit = store 6:i64 %b0:i13:i64*
  %b0:i15:unit = call @memcpy:[ret:unit params:(struct %t0*, struct %t0*, i32)]*(%l1:struct %t0*, %l0:const struct %t0*, 32:i32)
  %b0:i16:i8* = getelementptr %l1:struct %t0* offset 0:i64
  %b0:i17:i8 = load %b0:i16:i8*
  %b0:i18:i32 = typecast %b0:i17:i8 to i32
  %b0:i19:struct %t1* = getelementptr %l1:struct %t0* offset 4:i64
  %b0:i20:[4 x i32]* = getelementptr %b0:i19:struct %t1* offset 0:i64
  %b0:i21:i32* = getelementptr %b0:i20:[4 x i32]* offset 0:i32
  %b0:i22:i32* = getelementptr %b0:i21:i32* offset 8:i64
  %b0:i23:i32 = load %b0:i22:i32*
  %b0:i24:i32 = add %b0:i18:i32 %b0:i23:i32
  %b0:i25:i64 = typecast %b0:i24:i32 to i64
  %b0:i26:i64* = getelementptr %l1:struct %t0* offset 24:i64
  %b0:i27:i64 = load %b0:i26:i64*
  %b0:i28:i64 = add %b0:i25:i64 %b0:i27:i64
  %b0:i29:i32 = typecast %b0:i28:i64 to i32
  %b0:i30:u1 = cmp eq %b0:i29:i32 11:i32
  %b0:i31:i32 = typecast %b0:i30:u1 to i32
  ret %b0:i31:i32
}