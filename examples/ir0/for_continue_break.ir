
fun i32 @foo () {
init:
  bid: b0
  allocations: 
    %l0:i32:sum
    %l1:i32:i

block b0:
  %b0:i0:unit = store 0:i32 %l0:i32*
  j b1()

block b1:
  %b1:i0:unit = store 0:i32 %l1:i32*
  j b2()

block b2:
  j b3()

block b3:
  %b3:i0:i32 = load %l1:i32*
  %b3:i1:u1 = cmp eq %b3:i0:i32 5:i32
  br %b3:i1:u1, b6(), b7()

block b4:
  j b2()

block b5:
  %b5:i0:i32 = load %l0:i32*
  ret %b5:i0:i32

block b6:
  j b5()

block b7:
  j b8()

block b8:
  %b8:i0:i32 = load %l1:i32*
  %b8:i1:u1 = cmp eq %b8:i0:i32 3:i32
  br %b8:i1:u1, b10(), b11()

block b9:
  j b8()

block b10:
  %b10:i0:i32 = load %l1:i32*
  %b10:i1:i32 = add %b10:i0:i32 1:i32
  %b10:i2:unit = store %b10:i1:i32 %l1:i32*
  j b4()

block b11:
  j b12()

block b12:
  %b12:i0:i32 = load %l0:i32*
  %b12:i1:i32 = load %l1:i32*
  %b12:i2:i32 = add %b12:i0:i32 %b12:i1:i32
  %b12:i3:unit = store %b12:i2:i32 %l0:i32*
  %b12:i4:i32 = load %l1:i32*
  %b12:i5:i32 = add %b12:i4:i32 1:i32
  %b12:i6:unit = store %b12:i5:i32 %l1:i32*
  j b4()

block b13:
  j b12()

block b14:
  ret undef:i32
}

fun i32 @main () {
init:
  bid: b0
  allocations: 


block b0:
  %b0:i0:i32 = call @foo:[ret:i32 params:()]*()
  %b0:i1:u1 = cmp eq %b0:i0:i32 7:i32
  %b0:i2:i32 = typecast %b0:i1:u1 to i32
  ret %b0:i2:i32

block b1:
  ret 0:i32
}
