
fun i32 @fibonacci (i32) {
init:
  bid: b0
  allocations: 
    %l0:i32:n

block b0:
  %b0:p0:i32:n
  %b0:i0:unit = store %b0:p0:i32 %l0:i32*
  %b0:i1:i32 = load %l0:i32*
  %b0:i2:u1 = cmp lt %b0:i1:i32 2:i32
  br %b0:i2:u1, b1(), b2()

block b1:
  %b1:i0:i32 = load %l0:i32*
  %b1:i1:i32 = add %b1:i0:i32 2:i32
  %b1:i2:unit = store %b1:i1:i32 %l0:i32*
  j b3()

block b2:
  j b3()

block b3:
  %b3:i0:i32 = load %l0:i32*
  %b3:i1:i32 = sub %b3:i0:i32 2:i32
  %b3:i2:i32 = call @fibonacci:[ret:i32 params:(i32)]*(%b3:i1:i32)
  %b3:i3:i32 = load %l0:i32*
  %b3:i4:i32 = sub %b3:i3:i32 1:i32
  %b3:i5:i32 = call @fibonacci:[ret:i32 params:(i32)]*(%b3:i4:i32)
  %b3:i6:i32 = add %b3:i2:i32 %b3:i5:i32
  ret %b3:i6:i32

block b4:
  ret undef:i32
}

fun i32 @main () {
init:
  bid: b0
  allocations: 


block b0:
  ret 1:i32

block b1:
  ret 0:i32
}
