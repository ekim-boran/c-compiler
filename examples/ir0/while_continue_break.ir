var i32 @nonce = 1

fun i32 @foo () {
init:
  bid: b0
  allocations: 
    %l0:i32:sum
    %l1:i32:i
    %l2:i32:continue_num

block b0:
  %b0:i0:unit = store 0:i32 %l0:i32*
  %b0:i1:unit = store 0:i32 %l1:i32*
  %b0:i2:i32 = load @nonce:i32*
  %b0:i3:i32 = mod %b0:i2:i32 98:i32
  %b0:i4:unit = store %b0:i3:i32 %l2:i32*
  j b1()

block b1:
  %b1:i0:i32 = load %l1:i32*
  %b1:i1:u1 = cmp lt %b1:i0:i32 100:i32
  br %b1:i1:u1, b2(), b3()

block b2:
  %b2:i0:i32 = load %l1:i32*
  %b2:i1:i32 = load %l2:i32*
  %b2:i2:u1 = cmp eq %b2:i0:i32 %b2:i1:i32
  br %b2:i2:u1, b4(), b5()

block b3:
  %b3:i0:i32 = load %l0:i32*
  ret %b3:i0:i32

block b4:
  %b4:i0:i32 = load %l1:i32*
  %b4:i1:i32 = add %b4:i0:i32 1:i32
  %b4:i2:unit = store %b4:i1:i32 %l1:i32*
  j b1()

block b5:
  j b6()

block b6:
  %b6:i0:i32 = load %l0:i32*
  %b6:i1:i32 = load %l1:i32*
  %b6:i2:i32 = add %b6:i0:i32 %b6:i1:i32
  %b6:i3:unit = store %b6:i2:i32 %l0:i32*
  %b6:i4:i32 = load %l1:i32*
  %b6:i5:i32 = add %b6:i4:i32 1:i32
  %b6:i6:unit = store %b6:i5:i32 %l1:i32*
  %b6:i7:i32 = load %l1:i32*
  %b6:i8:i32 = load %l2:i32*
  %b6:i9:i32 = add %b6:i8:i32 2:i32
  %b6:i10:u1 = cmp eq %b6:i7:i32 %b6:i9:i32
  br %b6:i10:u1, b8(), b9()

block b7:
  j b6()

block b8:
  j b3()

block b9:
  j b10()

block b10:
  j b1()

block b11:
  j b10()

block b12:
  ret undef:i32
}

fun i32 @main () {
init:
  bid: b0
  allocations: 


block b0:
  %b0:i0:i32 = call @foo:[ret:i32 params:()]*()
  ret %b0:i0:i32

block b1:
  ret 0:i32
}
