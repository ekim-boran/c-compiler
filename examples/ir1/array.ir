
fun i32 @main () {
init:
  bid: b0
  allocations: 
    %l0:[5 x i32]:a
    %l1:i32:len
    %l2:i32:i

block b0:
  %b0:i0:unit = store 5:i32 %l1:i32*
  %b0:i1:unit = store 0:i32 %l2:i32*
  j b2()

block b2:
  %b2:i0:i32 = load %l2:i32*
  %b2:i1:i32 = load %l1:i32*
  %b2:i2:u1 = cmp lt %b2:i0:i32 %b2:i1:i32
  br %b2:i2:u1, b3(), b5()

block b3:
  %b3:i0:i32* = getelementptr %l0:[5 x i32]* offset 0:i32
  %b3:i1:i32 = load %l2:i32*
  %b3:i2:i64 = typecast %b3:i1:i32 to i64
  %b3:i3:i64 = mul %b3:i2:i64 4:i64
  %b3:i4:i32* = getelementptr %b3:i0:i32* offset %b3:i3:i64
  %b3:i5:i32 = load %l2:i32*
  %b3:i6:unit = store %b3:i5:i32 %b3:i4:i32*
  %b3:i7:i32 = load %l2:i32*
  %b3:i8:i32 = add %b3:i7:i32 1:i32
  %b3:i9:unit = store %b3:i8:i32 %l2:i32*
  j b2()

block b5:
  %b5:i0:i32 = load %l1:i32*
  %b5:i1:i32* = getelementptr %l0:[5 x i32]* offset 0:i32
  %b5:i2:i32 = call @sum:[ret:i32 params:(i32, i32*)]*(%b5:i0:i32, %b5:i1:i32*)
  %b5:i3:u1 = cmp eq %b5:i2:i32 10:i32
  %b5:i4:i32 = typecast %b5:i3:u1 to i32
  ret %b5:i4:i32
}

fun i32 @sum (i32, i32*) {
init:
  bid: b0
  allocations: 
    %l0:i32:len
    %l1:i32*:p
    %l2:i32:result
    %l3:i32:i

block b0:
  %b0:p0:i32:len
  %b0:p1:i32*:p
  %b0:i0:unit = store %b0:p0:i32 %l0:i32*
  %b0:i1:unit = store %b0:p1:i32* %l1:i32**
  %b0:i2:unit = store 0:i32 %l2:i32*
  %b0:i3:unit = store 0:i32 %l3:i32*
  j b2()

block b2:
  %b2:i0:i32 = load %l3:i32*
  %b2:i1:i32 = load %l0:i32*
  %b2:i2:u1 = cmp lt %b2:i0:i32 %b2:i1:i32
  br %b2:i2:u1, b3(), b5()

block b3:
  %b3:i0:i32 = load %l2:i32*
  %b3:i1:i32* = load %l1:i32**
  %b3:i2:i32 = load %l3:i32*
  %b3:i3:i64 = typecast %b3:i2:i32 to i64
  %b3:i4:i64 = mul %b3:i3:i64 4:i64
  %b3:i5:i32* = getelementptr %b3:i1:i32* offset %b3:i4:i64
  %b3:i6:i32 = load %b3:i5:i32*
  %b3:i7:i32 = add %b3:i0:i32 %b3:i6:i32
  %b3:i8:unit = store %b3:i7:i32 %l2:i32*
  %b3:i9:i32 = load %l3:i32*
  %b3:i10:i32 = add %b3:i9:i32 1:i32
  %b3:i11:unit = store %b3:i10:i32 %l3:i32*
  j b2()

block b5:
  %b5:i0:i32 = load %l2:i32*
  ret %b5:i0:i32
}
