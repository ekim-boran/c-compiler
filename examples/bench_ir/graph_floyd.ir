var [1000 x [1000 x i32]] @graph_weight
fun unit @graph_weight_init (i32, i32, i32*, [1000 x i32]*) {
init:
  bid: b0
  allocations:
block b0:
  %b0:p0:i32:n
  %b0:p1:i32:nonce
  %b0:p2:i32*:x
  %b0:p3:[1000 x i32]*:weight
  %b0:i0:i32 = add %b0:p1:i32 1:i32
  j b2(0:i32)
block b2:
  %b2:p0:i32:i
  %b2:i0:u1 = cmp lt %b2:p0:i32 %b0:p0:i32
  br %b2:i0:u1, b3(), b5()
block b3:
  %b3:i0:i64 = typecast %b2:p0:i32 to i64
  %b3:i1:i64 = mul %b3:i0:i64 4000:i64
  %b3:i2:[1000 x i32]* = getelementptr %b0:p3:[1000 x i32]* offset %b3:i1:i64
  %b3:i3:i32* = getelementptr %b3:i2:[1000 x i32]* offset 0:i32
  %b3:i4:i64 = mul %b3:i0:i64 4:i64
  %b3:i5:i32* = getelementptr %b3:i3:i32* offset %b3:i4:i64
  %b3:i6:unit = store 0:i32 %b3:i5:i32*
  j b7(1:i32)
block b5:
  ret unit:unit
block b7:
  %b7:p0:i32:j
  %b7:i0:u1 = cmp lt %b7:p0:i32 %b0:p0:i32
  br %b7:i0:u1, b8(), b10()
block b8:
  %b8:i0:i32 = add %b2:p0:i32 %b7:p0:i32
  %b8:i1:i32 = mod %b8:i0:i32 %b0:p0:i32
  %b8:i2:i64 = typecast %b8:i1:i32 to i64
  %b8:i3:i64 = mul %b8:i2:i64 4:i64
  %b8:i4:i32* = getelementptr %b3:i3:i32* offset %b8:i3:i64
  %b8:i5:i32 = load %b0:p2:i32*
  %b8:i6:i32 = add %b8:i5:i32 1:i32
  %b8:i7:unit = store %b8:i6:i32 %b0:p2:i32*
  %b8:i8:unit = store %b8:i6:i32 %b8:i4:i32*
  %b8:i9:i32 = load %b0:p2:i32*
  %b8:i10:i32 = mod %b8:i9:i32 %b0:i0:i32
  %b8:i11:u1 = cmp ne %b8:i10:i32 0:i32
  br %b8:i11:u1, b11(), b13()
block b10:
  %b10:i0:i32 = add %b2:p0:i32 1:i32
  j b2(%b10:i0:i32)
block b11:
  %b11:i0:i32 = load %b0:p2:i32*
  %b11:i1:i32 = add %b11:i0:i32 1:i32
  %b11:i2:unit = store %b11:i1:i32 %b0:p2:i32*
  j b13()
block b13:
  %b13:i0:i32 = add %b7:p0:i32 1:i32
  j b7(%b13:i0:i32)
}
fun i32 @graph_floyd_warshall (i32, i32) {
init:
  bid: b0
  allocations:
    %l0:i32:x
block b0:
  %b0:p0:i32:n
  %b0:p1:i32:nonce
  %b0:i0:u1 = cmp le %b0:p0:i32 1000:i32
  %b0:i1:u1 = negate %b0:i0:u1
  br %b0:i1:u1, b1(), b2()
block b1:
  ret %b0:p1:i32
block b2:
  %b2:i0:unit = store 0:i32 %l0:i32*
  %b2:i1:[1000 x i32]* = getelementptr @graph_weight:[1000 x [1000 x i32]]* offset 0:i32
  %b2:i2:unit = call @graph_weight_init:[ret:unit params:(i32, i32, i32*, [1000 x i32]*)]*(%b0:p0:i32, %b0:p1:i32, %l0:i32*, %b2:i1:[1000 x i32]*)
  %b2:i3:i32 = minus 1:i32
  j b5(0:i32)
block b5:
  %b5:p0:i32:k
  %b5:i0:u1 = cmp lt %b5:p0:i32 %b0:p0:i32
  br %b5:i0:u1, b6(), b32(0:i32, 0:i32)
block b6:
  %b6:i0:i64 = typecast %b5:p0:i32 to i64
  %b6:i1:i64 = mul %b6:i0:i64 4:i64
  %b6:i2:i64 = mul %b6:i0:i64 4000:i64
  %b6:i3:[1000 x i32]* = getelementptr %b2:i1:[1000 x i32]* offset %b6:i2:i64
  %b6:i4:i32* = getelementptr %b6:i3:[1000 x i32]* offset 0:i32
  j b10(0:i32)
block b10:
  %b10:p0:i32:i
  %b10:i0:u1 = cmp lt %b10:p0:i32 %b0:p0:i32
  br %b10:i0:u1, b11(), b13()
block b11:
  %b11:i0:i64 = typecast %b10:p0:i32 to i64
  %b11:i1:i64 = mul %b11:i0:i64 4000:i64
  %b11:i2:[1000 x i32]* = getelementptr %b2:i1:[1000 x i32]* offset %b11:i1:i64
  %b11:i3:i32* = getelementptr %b11:i2:[1000 x i32]* offset 0:i32
  %b11:i4:i32* = getelementptr %b11:i3:i32* offset %b6:i1:i64
  %b11:i5:i32 = load %b11:i4:i32*
  %b11:i6:u1 = cmp eq %b11:i5:i32 %b2:i3:i32
  br %b11:i6:u1, b12(), b18(0:i32)
block b12:
  %b12:i0:i32 = add %b10:p0:i32 1:i32
  j b10(%b12:i0:i32)
block b13:
  %b13:i0:i32 = add %b5:p0:i32 1:i32
  j b5(%b13:i0:i32)
block b18:
  %b18:p0:i32:j
  %b18:i0:u1 = cmp lt %b18:p0:i32 %b0:p0:i32
  br %b18:i0:u1, b19(), b12()
block b19:
  %b19:i0:i64 = typecast %b18:p0:i32 to i64
  %b19:i1:i64 = mul %b19:i0:i64 4:i64
  %b19:i2:i32* = getelementptr %b6:i4:i32* offset %b19:i1:i64
  %b19:i3:i32 = load %b19:i2:i32*
  %b19:i4:u1 = cmp eq %b19:i3:i32 %b2:i3:i32
  br %b19:i4:u1, b20(), b23()
block b20:
  %b20:i0:i32 = add %b18:p0:i32 1:i32
  j b18(%b20:i0:i32)
block b23:
  %b23:i0:i32 = load %b11:i4:i32*
  %b23:i1:i32 = load %b19:i2:i32*
  %b23:i2:i32 = add %b23:i0:i32 %b23:i1:i32
  %b23:i3:i32* = getelementptr %b11:i3:i32* offset %b19:i1:i64
  %b23:i4:i32 = load %b23:i3:i32*
  %b23:i5:u1 = cmp ne %b23:i4:i32 %b2:i3:i32
  br %b23:i5:u1, b28(), b30(0:u1)
block b26:
  %b26:i0:unit = store %b23:i2:i32 %b23:i3:i32*
  j b20()
block b28:
  %b28:i0:i32 = load %b23:i3:i32*
  %b28:i1:u1 = cmp lt %b28:i0:i32 %b23:i2:i32
  j b30(%b28:i1:u1)
block b30:
  %b30:p0:u1:t0
  br %b30:p0:u1, b20(), b26()
block b32:
  %b32:p0:i32:result
  %b32:p1:i32:i
  %b32:i0:u1 = cmp lt %b32:p1:i32 %b0:p0:i32
  br %b32:i0:u1, b33(), b35()
block b33:
  %b33:i0:i64 = typecast %b32:p1:i32 to i64
  %b33:i1:i64 = mul %b33:i0:i64 4000:i64
  %b33:i2:[1000 x i32]* = getelementptr %b2:i1:[1000 x i32]* offset %b33:i1:i64
  %b33:i3:i32* = getelementptr %b33:i2:[1000 x i32]* offset 0:i32
  j b37(%b32:p0:i32, 0:i32)
block b35:
  ret %b32:p0:i32
block b37:
  %b37:p0:i32:result
  %b37:p1:i32:j
  %b37:i0:u1 = cmp lt %b37:p1:i32 %b0:p0:i32
  br %b37:i0:u1, b38(), b40()
block b38:
  %b38:i0:i64 = typecast %b37:p1:i32 to i64
  %b38:i1:i64 = mul %b38:i0:i64 4:i64
  %b38:i2:i32* = getelementptr %b33:i3:i32* offset %b38:i1:i64
  %b38:i3:i32 = load %b38:i2:i32*
  %b38:i4:i32 = add %b37:p0:i32 %b38:i3:i32
  %b38:i5:i32 = add %b37:p1:i32 1:i32
  j b37(%b38:i4:i32, %b38:i5:i32)
block b40:
  %b40:i0:i32 = add %b32:p1:i32 1:i32
  j b32(%b37:p0:i32, %b40:i0:i32)
}
fun i32 @main () {
init:
  bid: b0
  allocations:
block b0:
  %b0:i0:u64 = call @clock:[ret:u64 params:()]*()
  %b0:i1:i32 = call @graph_floyd_warshall:[ret:i32 params:(i32, i32)]*(500:i32, 10:i32)
  %b0:i2:u64 = call @clock:[ret:u64 params:()]*()
  %b0:i3:u64 = sub %b0:i2:u64 %b0:i0:u64
  %b0:i4:unit = call @printf:[ret:unit params:(i8*, u64)]*("%d":i8*, %b0:i3:u64)
  ret %b0:i1:i32
}