var [10000 x i32] @two_dimension_array_arr
fun i32 @two_dimension_array (i32, i32) {
init:
  bid: b0
  allocations:
block b0:
  %b0:p0:i32:n
  %b0:p1:i32:nonce
  %b0:i0:u1 = cmp le %b0:p0:i32 10000:i32
  %b0:i1:u1 = negate %b0:i0:u1
  br %b0:i1:u1, b1(), b5(0:i32)
block b1:
  ret %b0:p1:i32
block b5:
  %b5:p0:i32:i
  %b5:i0:u1 = cmp lt %b5:p0:i32 %b0:p0:i32
  br %b5:i0:u1, b6(), b10(0:i32)
block b6:
  %b6:i0:i32* = getelementptr @two_dimension_array_arr:[10000 x i32]* offset 0:i32
  %b6:i1:i64 = typecast %b5:p0:i32 to i64
  %b6:i2:i64 = mul %b6:i1:i64 4:i64
  %b6:i3:i32* = getelementptr %b6:i0:i32* offset %b6:i2:i64
  %b6:i4:i32 = add %b5:p0:i32 %b0:p1:i32
  %b6:i5:unit = store %b6:i4:i32 %b6:i3:i32*
  %b6:i6:i32 = add %b5:p0:i32 1:i32
  j b5(%b6:i6:i32)
block b10:
  %b10:p0:i32:i
  %b10:i0:u1 = cmp lt %b10:p0:i32 %b0:p0:i32
  br %b10:i0:u1, b11(), b20(0:i32, 0:i32)
block b11:
  %b11:i0:i64 = typecast %b10:p0:i32 to i64
  %b11:i1:i64 = mul %b11:i0:i64 4:i64
  j b15(0:i32)
block b15:
  %b15:p0:i32:j
  %b15:i0:u1 = cmp lt %b15:p0:i32 %b0:p0:i32
  br %b15:i0:u1, b16(), b18()
block b16:
  %b16:i0:i32* = getelementptr @two_dimension_array_arr:[10000 x i32]* offset 0:i32
  %b16:i1:i32* = getelementptr %b16:i0:i32* offset %b11:i1:i64
  %b16:i2:i32 = load %b16:i1:i32*
  %b16:i3:i64 = typecast %b15:p0:i32 to i64
  %b16:i4:i64 = mul %b16:i3:i64 4:i64
  %b16:i5:i32* = getelementptr %b16:i0:i32* offset %b16:i4:i64
  %b16:i6:i32 = load %b16:i5:i32*
  %b16:i7:i32 = add %b16:i2:i32 %b16:i6:i32
  %b16:i8:unit = store %b16:i7:i32 %b16:i1:i32*
  %b16:i9:i32 = add %b15:p0:i32 1:i32
  j b15(%b16:i9:i32)
block b18:
  %b18:i0:i32 = add %b10:p0:i32 1:i32
  j b10(%b18:i0:i32)
block b20:
  %b20:p0:i32:result
  %b20:p1:i32:i
  %b20:i0:u1 = cmp lt %b20:p1:i32 %b0:p0:i32
  br %b20:i0:u1, b21(), b23()
block b21:
  %b21:i0:i32* = getelementptr @two_dimension_array_arr:[10000 x i32]* offset 0:i32
  %b21:i1:i64 = typecast %b20:p1:i32 to i64
  %b21:i2:i64 = mul %b21:i1:i64 4:i64
  %b21:i3:i32* = getelementptr %b21:i0:i32* offset %b21:i2:i64
  %b21:i4:i32 = load %b21:i3:i32*
  %b21:i5:i32 = add %b20:p0:i32 %b21:i4:i32
  %b21:i6:i32 = add %b20:p1:i32 1:i32
  j b20(%b21:i5:i32, %b21:i6:i32)
block b23:
  ret %b20:p0:i32
}
fun i32 @main () {
init:
  bid: b0
  allocations:
block b0:
  %b0:i0:u64 = call @clock:[ret:u64 params:()]*()
  %b0:i1:i32 = call @two_dimension_array:[ret:i32 params:(i32, i32)]*(10000:i32, 33:i32)
  %b0:i2:u64 = call @clock:[ret:u64 params:()]*()
  %b0:i3:u64 = sub %b0:i2:u64 %b0:i0:u64
  %b0:i4:unit = call @printf:[ret:unit params:(i8*, u64)]*("%d":i8*, %b0:i3:u64)
  ret %b0:i1:i32
}