fun i32 @fibonacci_loop (i32, i32) {
init:
  bid: b0
  allocations:
block b0:
  %b0:p0:i32:n
  %b0:p1:i32:nonce
  j b2(0:i32, 0:i32)
block b2:
  %b2:p0:i32:result
  %b2:p1:i32:step
  %b2:i0:u1 = cmp lt %b2:p1:i32 10:i32
  br %b2:i0:u1, b7(%b0:p1:i32, %b0:p1:i32, 1:i32), b5()
block b5:
  ret %b2:p0:i32
block b7:
  %b7:p0:i32:x
  %b7:p1:i32:y
  %b7:p2:i32:i
  %b7:i0:u1 = cmp lt %b7:p2:i32 %b0:p0:i32
  br %b7:i0:u1, b8(), b10()
block b8:
  %b8:i0:i32 = add %b7:p0:i32 %b7:p1:i32
  %b8:i1:i32 = add %b8:i0:i32 %b8:i0:i32
  %b8:i2:i32 = add %b8:i1:i32 %b8:i0:i32
  %b8:i3:i32 = add %b8:i2:i32 %b8:i0:i32
  %b8:i4:i32 = add %b8:i3:i32 %b8:i0:i32
  %b8:i5:i32 = add %b8:i4:i32 %b8:i0:i32
  %b8:i6:i32 = sub %b8:i5:i32 %b8:i0:i32
  %b8:i7:i32 = sub %b8:i6:i32 %b8:i0:i32
  %b8:i8:i32 = sub %b8:i7:i32 %b8:i0:i32
  %b8:i9:i32 = sub %b8:i8:i32 %b8:i0:i32
  %b8:i10:i32 = sub %b8:i9:i32 %b8:i0:i32
  %b8:i11:i32 = add %b7:p2:i32 1:i32
  j b7(%b7:p1:i32, %b8:i10:i32, %b8:i11:i32)
block b10:
  %b10:i0:i32 = add %b2:p0:i32 %b7:p1:i32
  %b10:i1:i32 = add %b2:p1:i32 1:i32
  j b2(%b10:i0:i32, %b10:i1:i32)
}
fun i32 @main () {
init:
  bid: b0
  allocations:
block b0:
  %b0:i0:u64 = call @clock:[ret:u64 params:()]*()
  %b0:i1:i32 = call @fibonacci_loop:[ret:i32 params:(i32, i32)]*(2000000:i32, 12:i32)
  %b0:i2:u64 = call @clock:[ret:u64 params:()]*()
  %b0:i3:u64 = sub %b0:i2:u64 %b0:i0:u64
  %b0:i4:unit = call @printf:[ret:unit params:(i8*, u64)]*("%d":i8*, %b0:i3:u64)
  ret %b0:i1:i32
}