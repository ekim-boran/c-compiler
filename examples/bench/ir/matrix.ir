var [500 x [500 x i32]] @matrix_a
var [500 x [500 x i32]] @matrix_b
var [500 x [500 x i32]] @matrix_c
fun unit @matrix_init (i32, i32, i32*, [500 x i32]*) {
init:
  bid: b0
  allocations:
block b0:
  %b0:p0:i32:n
  %b0:p1:i32:nonce
  %b0:p2:i32*:x
  %b0:p3:[500 x i32]*:matrix
  %b0:i0:i32 = add %b0:p1:i32 1:i32
  j b2(0:i32)
block b2:
  %b2:p0:i32:i
  %b2:i0:u1 = cmp lt %b2:p0:i32 %b0:p0:i32
  br %b2:i0:u1, b3(), b5()
block b3:
  %b3:i0:i64 = typecast %b2:p0:i32 to i64
  %b3:i1:i64 = mul %b3:i0:i64 2000:i64
  %b3:i2:[500 x i32]* = getelementptr %b0:p3:[500 x i32]* offset %b3:i1:i64
  %b3:i3:i32* = getelementptr %b3:i2:[500 x i32]* offset 0:i32
  j b7(0:i32)
block b5:
  ret unit:unit
block b7:
  %b7:p0:i32:j
  %b7:i0:u1 = cmp lt %b7:p0:i32 %b0:p0:i32
  br %b7:i0:u1, b8(), b10()
block b8:
  %b8:i0:i64 = typecast %b7:p0:i32 to i64
  %b8:i1:i64 = mul %b8:i0:i64 4:i64
  %b8:i2:i32* = getelementptr %b3:i3:i32* offset %b8:i1:i64
  %b8:i3:i32 = load %b0:p2:i32*
  %b8:i4:i32 = add %b8:i3:i32 1:i32
  %b8:i5:unit = store %b8:i4:i32 %b0:p2:i32*
  %b8:i6:unit = store %b8:i4:i32 %b8:i2:i32*
  %b8:i7:i32 = load %b0:p2:i32*
  %b8:i8:i32 = mod %b8:i7:i32 %b0:i0:i32
  %b8:i9:u1 = cmp ne %b8:i8:i32 0:i32
  br %b8:i9:u1, b11(), b13()
block b10:
  %b10:i0:i32 = add %b2:p0:i32 1:i32
  j b2(%b10:i0:i32)
block b11:
  %b11:i0:i32 = load %b0:p2:i32*
  %b11:i1:i32 = add %b11:i0:i32 1:i32
  %b11:i2:unit = store %b11:i1:i32 %b0:p2:i32*
  j b13()
block b13:
  %b13:i0:i32 = add %b7:p0:i32 1:i32
  j b7(%b13:i0:i32)
}
fun i32 @matrix_mul (i32, i32) {
init:
  bid: b0
  allocations:
    %l0:i32:x
block b0:
  %b0:p0:i32:n
  %b0:p1:i32:nonce
  %b0:i0:u1 = cmp le %b0:p0:i32 500:i32
  %b0:i1:u1 = negate %b0:i0:u1
  br %b0:i1:u1, b1(), b2()
block b1:
  ret %b0:p1:i32
block b2:
  %b2:i0:unit = store 0:i32 %l0:i32*
  %b2:i1:[500 x i32]* = getelementptr @matrix_a:[500 x [500 x i32]]* offset 0:i32
  %b2:i2:unit = call @matrix_init:[ret:unit params:(i32, i32, i32*, [500 x i32]*)]*(%b0:p0:i32, %b0:p1:i32, %l0:i32*, %b2:i1:[500 x i32]*)
  %b2:i3:[500 x i32]* = getelementptr @matrix_b:[500 x [500 x i32]]* offset 0:i32
  %b2:i4:unit = call @matrix_init:[ret:unit params:(i32, i32, i32*, [500 x i32]*)]*(%b0:p0:i32, %b0:p1:i32, %l0:i32*, %b2:i3:[500 x i32]*)
  j b5(0:i32, 0:i32)
block b5:
  %b5:p0:i32:result
  %b5:p1:i32:i
  %b5:i0:u1 = cmp lt %b5:p1:i32 %b0:p0:i32
  br %b5:i0:u1, b6(), b8()
block b6:
  %b6:i0:i64 = typecast %b5:p1:i32 to i64
  %b6:i1:i64 = mul %b6:i0:i64 2000:i64
  %b6:i2:[500 x i32]* = getelementptr %b2:i1:[500 x i32]* offset %b6:i1:i64
  %b6:i3:i32* = getelementptr %b6:i2:[500 x i32]* offset 0:i32
  j b10(%b5:p0:i32, 0:i32)
block b8:
  ret %b5:p0:i32
block b10:
  %b10:p0:i32:result
  %b10:p1:i32:j
  %b10:i0:u1 = cmp lt %b10:p1:i32 %b0:p0:i32
  br %b10:i0:u1, b11(), b13()
block b11:
  %b11:i0:[500 x i32]* = getelementptr @matrix_c:[500 x [500 x i32]]* offset 0:i32
  %b11:i1:[500 x i32]* = getelementptr %b11:i0:[500 x i32]* offset %b6:i1:i64
  %b11:i2:i32* = getelementptr %b11:i1:[500 x i32]* offset 0:i32
  %b11:i3:i64 = typecast %b10:p1:i32 to i64
  %b11:i4:i64 = mul %b11:i3:i64 4:i64
  %b11:i5:i32* = getelementptr %b11:i2:i32* offset %b11:i4:i64
  %b11:i6:unit = store 0:i32 %b11:i5:i32*
  j b15(0:i32)
block b13:
  %b13:i0:i32 = add %b5:p1:i32 1:i32
  j b5(%b10:p0:i32, %b13:i0:i32)
block b15:
  %b15:p0:i32:k
  %b15:i0:u1 = cmp lt %b15:p0:i32 %b0:p0:i32
  br %b15:i0:u1, b16(), b18()
block b16:
  %b16:i0:i32 = load %b11:i5:i32*
  %b16:i1:i64 = typecast %b15:p0:i32 to i64
  %b16:i2:i64 = mul %b16:i1:i64 4:i64
  %b16:i3:i32* = getelementptr %b6:i3:i32* offset %b16:i2:i64
  %b16:i4:i32 = load %b16:i3:i32*
  %b16:i5:i64 = mul %b16:i1:i64 2000:i64
  %b16:i6:[500 x i32]* = getelementptr %b2:i3:[500 x i32]* offset %b16:i5:i64
  %b16:i7:i32* = getelementptr %b16:i6:[500 x i32]* offset 0:i32
  %b16:i8:i32* = getelementptr %b16:i7:i32* offset %b11:i4:i64
  %b16:i9:i32 = load %b16:i8:i32*
  %b16:i10:i32 = mul %b16:i4:i32 %b16:i9:i32
  %b16:i11:i32 = add %b16:i0:i32 %b16:i10:i32
  %b16:i12:unit = store %b16:i11:i32 %b11:i5:i32*
  %b16:i13:i32 = add %b15:p0:i32 1:i32
  j b15(%b16:i13:i32)
block b18:
  %b18:i0:i32 = load %b11:i5:i32*
  %b18:i1:i32 = add %b10:p0:i32 %b18:i0:i32
  %b18:i2:i32 = add %b10:p1:i32 1:i32
  j b10(%b18:i1:i32, %b18:i2:i32)
}
fun i32 @matrix_add (i32, i32) {
init:
  bid: b0
  allocations:
    %l0:i32:x
block b0:
  %b0:p0:i32:n
  %b0:p1:i32:nonce
  %b0:i0:u1 = cmp le %b0:p0:i32 500:i32
  %b0:i1:u1 = negate %b0:i0:u1
  br %b0:i1:u1, b1(), b2()
block b1:
  ret %b0:p1:i32
block b2:
  %b2:i0:unit = store 0:i32 %l0:i32*
  %b2:i1:[500 x i32]* = getelementptr @matrix_a:[500 x [500 x i32]]* offset 0:i32
  %b2:i2:unit = call @matrix_init:[ret:unit params:(i32, i32, i32*, [500 x i32]*)]*(%b0:p0:i32, %b0:p1:i32, %l0:i32*, %b2:i1:[500 x i32]*)
  %b2:i3:[500 x i32]* = getelementptr @matrix_b:[500 x [500 x i32]]* offset 0:i32
  %b2:i4:unit = call @matrix_init:[ret:unit params:(i32, i32, i32*, [500 x i32]*)]*(%b0:p0:i32, %b0:p1:i32, %l0:i32*, %b2:i3:[500 x i32]*)
  j b5(0:i32, 0:i32)
block b5:
  %b5:p0:i32:result
  %b5:p1:i32:i
  %b5:i0:u1 = cmp lt %b5:p1:i32 %b0:p0:i32
  br %b5:i0:u1, b6(), b8()
block b6:
  %b6:i0:i64 = typecast %b5:p1:i32 to i64
  %b6:i1:i64 = mul %b6:i0:i64 2000:i64
  %b6:i2:[500 x i32]* = getelementptr %b2:i1:[500 x i32]* offset %b6:i1:i64
  %b6:i3:i32* = getelementptr %b6:i2:[500 x i32]* offset 0:i32
  %b6:i4:[500 x i32]* = getelementptr %b2:i3:[500 x i32]* offset %b6:i1:i64
  %b6:i5:i32* = getelementptr %b6:i4:[500 x i32]* offset 0:i32
  j b10(%b5:p0:i32, 0:i32)
block b8:
  ret %b5:p0:i32
block b10:
  %b10:p0:i32:result
  %b10:p1:i32:j
  %b10:i0:u1 = cmp lt %b10:p1:i32 %b0:p0:i32
  br %b10:i0:u1, b11(), b13()
block b11:
  %b11:i0:[500 x i32]* = getelementptr @matrix_c:[500 x [500 x i32]]* offset 0:i32
  %b11:i1:[500 x i32]* = getelementptr %b11:i0:[500 x i32]* offset %b6:i1:i64
  %b11:i2:i32* = getelementptr %b11:i1:[500 x i32]* offset 0:i32
  %b11:i3:i64 = typecast %b10:p1:i32 to i64
  %b11:i4:i64 = mul %b11:i3:i64 4:i64
  %b11:i5:i32* = getelementptr %b11:i2:i32* offset %b11:i4:i64
  %b11:i6:i32* = getelementptr %b6:i3:i32* offset %b11:i4:i64
  %b11:i7:i32 = load %b11:i6:i32*
  %b11:i8:i32* = getelementptr %b6:i5:i32* offset %b11:i4:i64
  %b11:i9:i32 = load %b11:i8:i32*
  %b11:i10:i32 = mul %b0:p1:i32 %b11:i9:i32
  %b11:i11:i32 = add %b11:i7:i32 %b11:i10:i32
  %b11:i12:unit = store %b11:i11:i32 %b11:i5:i32*
  %b11:i13:i32 = load %b11:i5:i32*
  %b11:i14:i32 = add %b10:p0:i32 %b11:i13:i32
  %b11:i15:i32 = add %b10:p1:i32 1:i32
  j b10(%b11:i14:i32, %b11:i15:i32)
block b13:
  %b13:i0:i32 = add %b5:p1:i32 1:i32
  j b5(%b10:p0:i32, %b13:i0:i32)
}
fun i32 @main () {
init:
  bid: b0
  allocations:
block b0:
  %b0:i0:u64 = call @clock:[ret:u64 params:()]*()
  %b0:i1:i32 = call @matrix_mul:[ret:i32 params:(i32, i32)]*(500:i32, 11:i32)
  %b0:i2:i32 = call @matrix_add:[ret:i32 params:(i32, i32)]*(500:i32, 12:i32)
  %b0:i3:i32 = add %b0:i1:i32 %b0:i2:i32
  %b0:i4:u64 = call @clock:[ret:u64 params:()]*()
  %b0:i5:u64 = sub %b0:i4:u64 %b0:i0:u64
  %b0:i6:unit = call @printf:[ret:unit params:(i8*, u64)]*("%d":i8*, %b0:i5:u64)
  ret %b0:i3:i32
}